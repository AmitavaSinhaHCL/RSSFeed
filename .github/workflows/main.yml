name: .NET

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
env:
  app-name: 'SimpleAppGithub'
  rg-name: 'SimpleApp-rg'

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Setup .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 5.0.x
    - name: Setup .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 2.1.x
    - name: Restore dependencies
      run: dotnet restore
    - name: Build
      run: dotnet build --configuration Release --no-restore 
    - name: Deploy web app
      id: deploywebapp
      uses: azure/webapps-deploy@v2
      with:
        app-name: ${{ env.app-name }}
        publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
    - name: Test
      run: dotnet test --logger "trx;LogFileName=unittests.trx" --results-directory "TestResults/" /p:CollectCoverage=true /p:CoverletOutputFormat=opencover /p:CoverletOutput=opencover.xml
    - name: Publish
      run: dotnet publish SimpleFeedReader/SimpleFeedReader.csproj -c Release -o './binaries'
    - name: Upload a Build Artifact
      uses: actions/upload-artifact@v3.1.0
      with:
        name: website
        path: './binaries'
        if-no-files-found: error
    - name: Upload dotnet test results
      uses: actions/upload-artifact@v3
      with:
        name: artifact
        path: TestResults/
        # Use always() to always run this step to publish test results when there are test failures
      if: ${{ always() }}
    - name: SonarCloud Scan
      uses: sonarsource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
    - name: Deploy Stage
      id: myRequest
      uses: fjogeleit/http-request-action@v1
      with:
        url: 'https://sonarcloud.io/api/qualitygates/project_status?projectKey=amitavasinha-github'
        method: 'GET'
        bearerToken: 'Basic 5583d75d233c958bdc3b90a2a0efe8b2c3cc8c48'
        customHeaders: '{"Content-Type": "application/json"}'
    - name: Show Response
      run: |
        echo ${{ steps.myRequest.outputs.response }}
        echo ${{ fromJson(steps.myRequest.outputs.response).projectStatus }}
    
  deploy_staging:
    needs: build
    runs-on: ubuntu-latest

    environment:
      name: PRE-PROD
      url: ${{ steps.deploywebapp.outputs.webapp-url }}

    steps:
    - name: Download a Build Artifact
      uses: actions/download-artifact@v2.0.8
      with:
        name: website
        path: './binaries'

    - name: Login via Azure CLI
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    

    - name: az cli logout
      run: az logout
